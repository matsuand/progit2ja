# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-04 19:16+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:2
#, no-wrap
msgid "=== Basic Branching and Merging\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:5
#, no-wrap
msgid ""
"Let's go through a simple example of branching and merging with a workflow "
"that you might use in the real world.\n"
"You'll follow these steps:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:9
#, no-wrap
msgid ""
". Do some work on a website.\n"
". Create a branch for a new user story you're working on.\n"
". Do some work in that branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:12
#, no-wrap
msgid ""
"At this stage, you'll receive a call that another issue is critical and you "
"need a hotfix.\n"
"You'll do the following:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:17
#, no-wrap
msgid ""
". Switch to your production branch.\n"
". Create a branch to add the hotfix.\n"
". After it's tested, merge the hotfix branch, and push to production.\n"
". Switch back to your original user story and continue working.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:20
#, no-wrap
msgid ""
"[[_basic_branching]]\n"
"==== Basic Branching\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:23
#, no-wrap
msgid ""
"(((branches, basic workflow)))\n"
"First, let's say you're working on your project and have a couple of commits "
"already on the `master` branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:26
#, no-wrap
msgid ""
".A simple commit history\n"
"image::images/basic-branching-1.png[A simple commit history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:29
#, no-wrap
msgid ""
"You've decided that you're going to work on issue #53 in whatever "
"issue-tracking system your company uses.\n"
"To create a new branch and switch to it at the same time, you can run the "
"`git checkout` command with the `-b` switch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:31
#: book/03-git-branching/sections/basic-branching-and-merging.asc:39
#: book/03-git-branching/sections/basic-branching-and-merging.asc:51
#: book/03-git-branching/sections/basic-branching-and-merging.asc:69
#: book/03-git-branching/sections/basic-branching-and-merging.asc:82
#: book/03-git-branching/sections/basic-branching-and-merging.asc:98
#: book/03-git-branching/sections/basic-branching-and-merging.asc:121
#: book/03-git-branching/sections/basic-branching-and-merging.asc:129
#: book/03-git-branching/sections/basic-branching-and-merging.asc:153
#: book/03-git-branching/sections/basic-branching-and-merging.asc:180
#: book/03-git-branching/sections/basic-branching-and-merging.asc:193
#: book/03-git-branching/sections/basic-branching-and-merging.asc:205
#: book/03-git-branching/sections/basic-branching-and-merging.asc:252
#: book/03-git-branching/sections/basic-branching-and-merging.asc:281
#: book/03-git-branching/sections/basic-branching-and-merging.asc:296
#: book/03-git-branching/sections/branch-management.asc:11
#: book/03-git-branching/sections/branch-management.asc:23
#: book/03-git-branching/sections/branch-management.asc:34
#: book/03-git-branching/sections/branch-management.asc:46
#: book/03-git-branching/sections/branch-management.asc:55
#: book/03-git-branching/sections/branch-management.asc:100
#: book/03-git-branching/sections/branch-management.asc:120
#: book/03-git-branching/sections/branch-management.asc:138
#: book/03-git-branching/sections/branch-management.asc:148
#: book/03-git-branching/sections/branch-management.asc:155
#: book/03-git-branching/sections/nutshell.asc:15
#: book/03-git-branching/sections/nutshell.asc:58
#: book/03-git-branching/sections/nutshell.asc:81
#: book/03-git-branching/sections/nutshell.asc:98
#: book/03-git-branching/sections/nutshell.asc:111
#: book/03-git-branching/sections/nutshell.asc:123
#: book/03-git-branching/sections/nutshell.asc:158
#: book/03-git-branching/sections/nutshell.asc:176
#: book/03-git-branching/sections/rebasing.asc:29
#: book/03-git-branching/sections/rebasing.asc:44
#: book/03-git-branching/sections/rebasing.asc:79
#: book/03-git-branching/sections/rebasing.asc:92
#: book/03-git-branching/sections/rebasing.asc:105
#: book/03-git-branching/sections/rebasing.asc:118
#: book/03-git-branching/sections/rebasing.asc:126
#: book/03-git-branching/sections/remote-branches.asc:71
#: book/03-git-branching/sections/remote-branches.asc:104
#: book/03-git-branching/sections/remote-branches.asc:121
#: book/03-git-branching/sections/remote-branches.asc:143
#: book/03-git-branching/sections/remote-branches.asc:153
#: book/03-git-branching/sections/remote-branches.asc:162
#: book/03-git-branching/sections/remote-branches.asc:173
#: book/03-git-branching/sections/remote-branches.asc:189
#: book/03-git-branching/sections/remote-branches.asc:208
#: book/03-git-branching/sections/remote-branches.asc:231
#, no-wrap
msgid ""
"[source,console]\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:34
#, no-wrap
msgid ""
"$ git checkout -b iss53\n"
"Switched to a new branch \"iss53\"\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:37
#, no-wrap
msgid "This is shorthand for:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:42
#, no-wrap
msgid ""
"$ git branch iss53\n"
"$ git checkout iss53\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:46
#, no-wrap
msgid ""
".Creating a new branch pointer\n"
"image::images/basic-branching-2.png[Creating a new branch pointer]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:49
#, no-wrap
msgid ""
"You work on your website and do some commits.\n"
"Doing so moves the `iss53` branch forward, because you have it checked out "
"(that is, your `HEAD` is pointing to it):\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:54
#, no-wrap
msgid ""
"$ vim index.html\n"
"$ git commit -a -m 'Create new footer [issue 53]'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:58
#, no-wrap
msgid ""
".The `iss53` branch has moved forward with your work\n"
"image::images/basic-branching-3.png[The `iss53` branch has moved forward "
"with your work]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:62
#, no-wrap
msgid ""
"Now you get the call that there is an issue with the website, and you need "
"to fix it immediately.\n"
"With Git, you don't have to deploy your fix along with the `iss53` changes "
"you've made, and you don't have to put a lot of effort into reverting those "
"changes before you can work on applying your fix to what is in production.\n"
"All you have to do is switch back to your `master` branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:67
#, no-wrap
msgid ""
"However, before you do that, note that if your working directory or staging "
"area has uncommitted changes that conflict with the branch you're checking "
"out, Git won't let you switch branches.\n"
"It's best to have a clean working state when you switch branches.\n"
"There are ways to get around this (namely, stashing and commit amending) "
"that we'll cover later on, in <<ch07-git-tools#_git_stashing>>.\n"
"For now, let's assume you've committed all your changes, so you can switch "
"back to your `master` branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:72
#, no-wrap
msgid ""
"$ git checkout master\n"
"Switched to branch 'master'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:77
#, no-wrap
msgid ""
"At this point, your project working directory is exactly the way it was "
"before you started working on issue #53, and you can concentrate on your "
"hotfix.\n"
"This is an important point to remember: when you switch branches, Git resets "
"your working directory to look like it did the last time you committed on "
"that branch.\n"
"It adds, removes, and modifies files automatically to make sure your working "
"copy is what the branch looked like on your last commit to it.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:80
#, no-wrap
msgid ""
"Next, you have a hotfix to make.\n"
"Let's create a `hotfix` branch on which to work until it's completed:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:89
#, no-wrap
msgid ""
"$ git checkout -b hotfix\n"
"Switched to a new branch 'hotfix'\n"
"$ vim index.html\n"
"$ git commit -a -m 'Fix broken email address'\n"
"[hotfix 1fb7853] Fix broken email address\n"
" 1 file changed, 2 insertions(+)\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:93
#, no-wrap
msgid ""
".Hotfix branch based on `master`\n"
"image::images/basic-branching-4.png[Hotfix branch based on `master`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:96
#, no-wrap
msgid ""
"You can run your tests, make sure the hotfix is what you want, and finally "
"merge the `hotfix` branch back into your `master` branch to deploy to "
"production.\n"
"You do this with the `git merge` command:(((git commands, merge)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:105
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge hotfix\n"
"Updating f42c576..3a0874c\n"
"Fast-forward\n"
" index.html | 2 ++\n"
" 1 file changed, 2 insertions(+)\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:110
#, no-wrap
msgid ""
"You'll notice the phrase \"`fast-forward`\" in that merge.\n"
"Because the commit `C4` pointed to by the branch `hotfix` you merged in was "
"directly ahead of the commit `C2` you're on, Git simply moves the pointer "
"forward.\n"
"To phrase that another way, when you try to merge one commit with a commit "
"that can be reached by following the first commit's history, Git simplifies "
"things by moving the pointer forward because there is no divergent work to "
"merge together -- this is called a \"`fast-forward.`\"\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:112
#, no-wrap
msgid ""
"Your change is now in the snapshot of the commit pointed to by the `master` "
"branch, and you can deploy the fix.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:115
#, no-wrap
msgid ""
".`master` is fast-forwarded to `hotfix`\n"
"image::images/basic-branching-5.png[`master` is fast-forwarded to "
"`hotfix`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:119
#, no-wrap
msgid ""
"After your super-important fix is deployed, you're ready to switch back to "
"the work you were doing before you were interrupted.\n"
"However, first you'll delete the `hotfix` branch, because you no longer need "
"it -- the `master` branch points at the same place.\n"
"You can delete it with the `-d` option to `git branch`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:124
#, no-wrap
msgid ""
"$ git branch -d hotfix\n"
"Deleted branch hotfix (3a0874c).\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:127
#, no-wrap
msgid ""
"Now you can switch back to your work-in-progress branch on issue #53 and "
"continue working on it.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:136
#, no-wrap
msgid ""
"$ git checkout iss53\n"
"Switched to branch \"iss53\"\n"
"$ vim index.html\n"
"$ git commit -a -m 'Finish the new footer [issue 53]'\n"
"[iss53 ad82d7a] Finish the new footer [issue 53]\n"
"1 file changed, 1 insertion(+)\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:140
#, no-wrap
msgid ""
".Work continues on `iss53`\n"
"image::images/basic-branching-6.png[Work continues on `iss53`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:143
#, no-wrap
msgid ""
"It's worth noting here that the work you did in your `hotfix` branch is not "
"contained in the files in your `iss53` branch.\n"
"If you need to pull it in, you can merge your `master` branch into your "
"`iss53` branch by running `git merge master`, or you can wait to integrate "
"those changes until you decide to pull the `iss53` branch back into `master` "
"later.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:146
#, no-wrap
msgid ""
"[[_basic_merging]]\n"
"==== Basic Merging\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:151
#, no-wrap
msgid ""
"(((branches, merging)))(((merging)))\n"
"Suppose you've decided that your issue #53 work is complete and ready to be "
"merged into your `master` branch.\n"
"In order to do that, you'll merge your `iss53` branch into `master`, much "
"like you merged your `hotfix` branch earlier.\n"
"All you have to do is check out the branch you wish to merge into and then "
"run the `git merge` command:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:160
#, no-wrap
msgid ""
"$ git checkout master\n"
"Switched to branch 'master'\n"
"$ git merge iss53\n"
"Merge made by the 'recursive' strategy.\n"
"index.html |    1 +\n"
"1 file changed, 1 insertion(+)\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:166
#, no-wrap
msgid ""
"This looks a bit different than the `hotfix` merge you did earlier.\n"
"In this case, your development history has diverged from some older point.\n"
"Because the commit on the branch you're on isn't a direct ancestor of the "
"branch you're merging in, Git has to do some work.\n"
"In this case, Git does a simple three-way merge, using the two snapshots "
"pointed to by the branch tips and the common ancestor of the two.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:169
#, no-wrap
msgid ""
".Three snapshots used in a typical merge\n"
"image::images/basic-merging-1.png[Three snapshots used in a typical merge]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:172
#, no-wrap
msgid ""
"Instead of just moving the branch pointer forward, Git creates a new "
"snapshot that results from this three-way merge and automatically creates a "
"new commit that points to it.\n"
"This is referred to as a merge commit, and is special in that it has more "
"than one parent.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:175
#, no-wrap
msgid ""
".A merge commit\n"
"image::images/basic-merging-2.png[A merge commit]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:178
#, no-wrap
msgid ""
"Now that your work is merged in, you have no further need for the `iss53` "
"branch.\n"
"You can close the issue in your issue-tracking system, and delete the "
"branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:182
#, no-wrap
msgid ""
"$ git branch -d iss53\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:186
#, no-wrap
msgid ""
"[[_basic_merge_conflicts]]\n"
"==== Basic Merge Conflicts\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:191
#, no-wrap
msgid ""
"(((merging, conflicts)))\n"
"Occasionally, this process doesn't go smoothly.\n"
"If you changed the same part of the same file differently in the two "
"branches you're merging, Git won't be able to merge them cleanly.\n"
"If your fix for issue #53 modified the same part of a file as the `hotfix` "
"branch, you'll get a merge conflict that looks something like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:198
#, no-wrap
msgid ""
"$ git merge iss53\n"
"Auto-merging index.html\n"
"CONFLICT (content): Merge conflict in index.html\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:203
#, no-wrap
msgid ""
"Git hasn't automatically created a new merge commit.\n"
"It has paused the process while you resolve the conflict.\n"
"If you want to see which files are unmerged at any point after a merge "
"conflict, you can run `git status`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:210
#, no-wrap
msgid ""
"$ git status\n"
"On branch master\n"
"You have unmerged paths.\n"
"  (fix conflicts and run \"git commit\")\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:213
#, no-wrap
msgid ""
"Unmerged paths:\n"
"  (use \"git add <file>...\" to mark resolution)\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:215
#, no-wrap
msgid "    both modified:      index.html\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:217
#, no-wrap
msgid ""
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:222
#, no-wrap
msgid ""
"Anything that has merge conflicts and hasn't been resolved is listed as "
"unmerged.\n"
"Git adds standard conflict-resolution markers to the files that have "
"conflicts, so you can open them manually and resolve those conflicts.\n"
"Your file contains a section that looks something like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:224
#: book/03-git-branching/sections/basic-branching-and-merging.asc:239
#, no-wrap
msgid ""
"[source,html]\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:227
#, no-wrap
msgid ""
"<<<<<<< HEAD:index.html\n"
"<div id=\"footer\">contact : email.support@github.com</div>\n"
"=======\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:232
#, no-wrap
msgid ""
"<div id=\"footer\">\n"
" please contact us at support@github.com\n"
"</div>\n"
">>>>>>> iss53:index.html\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:237
#, no-wrap
msgid ""
"This means the version in `HEAD` (your `master` branch, because that was "
"what you had checked out when you ran your merge command) is the top part of "
"that block (everything above the `=======`), while the version in your "
"`iss53` branch looks like everything in the bottom part.\n"
"In order to resolve the conflict, you have to either choose one side or the "
"other or merge the contents yourself.\n"
"For instance, you might resolve this conflict by replacing the entire block "
"with this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:243
#, no-wrap
msgid ""
"<div id=\"footer\">\n"
"please contact us at email.support@github.com\n"
"</div>\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:248
#, no-wrap
msgid ""
"This resolution has a little of each section, and the `<<<<<<<`, `=======`, "
"and `>>>>>>>` lines have been completely removed.\n"
"After you've resolved each of these sections in each conflicted file, run "
"`git add` on each file to mark it as resolved.\n"
"Staging the file marks it as resolved in Git.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:250
#, no-wrap
msgid ""
"If you want to use a graphical tool to resolve these issues, you can run "
"`git mergetool`, which fires up an appropriate visual merge tool and walks "
"you through the conflicts:(((git commands, mergetool)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:254
#, no-wrap
msgid "$ git mergetool\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:261
#, no-wrap
msgid ""
"This message is displayed because 'merge.tool' is not configured.\n"
"See 'git mergetool --tool-help' or 'git help config' for more details.\n"
"'git mergetool' will now attempt to use one of the following tools:\n"
"opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge "
"ecmerge p4merge araxis bc3 codecompare vimdiff emerge\n"
"Merging:\n"
"index.html\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:266
#, no-wrap
msgid ""
"Normal merge conflict for 'index.html':\n"
"  {local}: modified file\n"
"  {remote}: modified file\n"
"Hit return to start merge resolution tool (opendiff):\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:270
#, no-wrap
msgid ""
"If you want to use a merge tool other than the default (Git chose `opendiff` "
"in this case because the command was run on a Mac), you can see all the "
"supported tools listed at the top after \"`one of the following tools.`\"\n"
"Just type the name of the tool you'd rather use.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:272
#: book/03-git-branching/sections/nutshell.asc:39
#: book/03-git-branching/sections/nutshell.asc:203
#, no-wrap
msgid ""
"[NOTE]\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:274
#, no-wrap
msgid ""
"If you need more advanced tools for resolving tricky merge conflicts, we "
"cover more on merging in <<ch07-git-tools#_advanced_merging>>.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:279
#, no-wrap
msgid ""
"After you exit the merge tool, Git asks you if the merge was successful.\n"
"If you tell the script that it was, it stages the file to mark it as "
"resolved for you.\n"
"You can run `git status` again to verify that all conflicts have been "
"resolved:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:286
#, no-wrap
msgid ""
"$ git status\n"
"On branch master\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:288
#, no-wrap
msgid "Changes to be committed:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:290
#, no-wrap
msgid ""
"    modified:   index.html\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:294
#, no-wrap
msgid ""
"If you're happy with that, and you verify that everything that had conflicts "
"has been staged, you can type `git commit` to finalize the merge commit.\n"
"The commit message by default looks something like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:298
#, no-wrap
msgid "Merge branch 'iss53'\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:306
#, no-wrap
msgid ""
"Conflicts:\n"
"    index.html\n"
"#\n"
"# It looks like you may be committing a merge.\n"
"# If this is not correct, please remove the file\n"
"#\t.git/MERGE_HEAD\n"
"# and try again.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:316
#, no-wrap
msgid ""
"# Please enter the commit message for your changes. Lines starting\n"
"# with '#' will be ignored, and an empty message aborts the commit.\n"
"# On branch master\n"
"# All conflicts fixed but you are still merging.\n"
"#\n"
"# Changes to be committed:\n"
"#\tmodified:   index.html\n"
"#\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/basic-branching-and-merging.asc:318
#, no-wrap
msgid ""
"If you think it would be helpful to others looking at this merge in the "
"future, you can modify this commit message with details about how you "
"resolved the merge and explain why you did the changes you made if these are "
"not obvious.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:3
#, no-wrap
msgid ""
"[[_branch_management]]\n"
"=== Branch Management\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:6
#, no-wrap
msgid ""
"(((branches, managing)))\n"
"Now that you've created, merged, and deleted some branches, let's look at "
"some branch-management tools that will come in handy when you begin using "
"branches all the time.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:9
#, no-wrap
msgid ""
"The `git branch` command does more than just create and delete "
"branches.(((git commands, branch)))\n"
"If you run it with no arguments, you get a simple listing of your current "
"branches:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:16
#, no-wrap
msgid ""
"$ git branch\n"
"  iss53\n"
"* master\n"
"  testing\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:21
#, no-wrap
msgid ""
"Notice the `*` character that prefixes the `master` branch: it indicates the "
"branch that you currently have checked out (i.e., the branch that `HEAD` "
"points to).\n"
"This means that if you commit at this point, the `master` branch will be "
"moved forward with your new work.\n"
"To see the last commit on each branch, you can run `git branch -v`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:28
#, no-wrap
msgid ""
"$ git branch -v\n"
"  iss53   93b412c Fix javascript issue\n"
"* master  7a98805 Merge branch 'iss53'\n"
"  testing 782fd34 Add scott to the author list in the readme\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:32
#, no-wrap
msgid ""
"The useful `--merged` and `--no-merged` options can filter this list to "
"branches that you have or have not yet merged into the branch you're "
"currently on.\n"
"To see which branches are already merged into the branch you're on, you can "
"run `git branch --merged`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:38
#, no-wrap
msgid ""
"$ git branch --merged\n"
"  iss53\n"
"* master\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:42
#, no-wrap
msgid ""
"Because you already merged in `iss53` earlier, you see it in your list.\n"
"Branches on this list without the `*` in front of them are generally fine to "
"delete with `git branch -d`; you've already incorporated their work into "
"another branch, so you're not going to lose anything.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:44
#, no-wrap
msgid ""
"To see all the branches that contain work you haven't yet merged in, you can "
"run `git branch --no-merged`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:49
#, no-wrap
msgid ""
"$ git branch --no-merged\n"
"  testing\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:53
#, no-wrap
msgid ""
"This shows your other branch.\n"
"Because it contains work that isn't merged in yet, trying to delete it with "
"`git branch -d` will fail:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:59
#, no-wrap
msgid ""
"$ git branch -d testing\n"
"error: The branch 'testing' is not fully merged.\n"
"If you are sure you want to delete it, run 'git branch -D testing'.\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:62
#, no-wrap
msgid ""
"If you really do want to delete the branch and lose that work, you can force "
"it with `-D`, as the helpful message points out.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:64
#, no-wrap
msgid ""
"[TIP]\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:66
#, no-wrap
msgid ""
"The options described above, `--merged` and `--no-merged` will, if not given "
"a commit or branch name as an argument, show you what is, respectively, "
"merged or not merged into your _current_ branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:69
#, no-wrap
msgid ""
"You can always provide an additional argument to ask about the merge state "
"with respect to some other branch without checking  that other branch out "
"first, as in, what is not merged into the `master` branch?\n"
"[source,console]\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:74
#, no-wrap
msgid ""
"$ git checkout testing\n"
"$ git branch --no-merged master\n"
"  topicA\n"
"  featureB\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:75
#, no-wrap
msgid "====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:78
#, no-wrap
msgid "==== Changing a branch name\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:80
#, no-wrap
msgid ""
"[CAUTION]\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:83
#, no-wrap
msgid ""
"Do not rename branches that are still in use by other collaborators.\n"
"Do not rename a branch like master/main/mainline without having read the "
"section \"Changing the master branch name\".\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:88
#, no-wrap
msgid ""
"Suppose you have a branch that is called `bad-branch-name` and you want to "
"change it to `corrected-branch-name`, while keeping all history.\n"
"You also want to change the branch name on the remote (GitHub, GitLab, other "
"server).\n"
"How do you do this?\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:90
#, no-wrap
msgid "Rename the branch locally with the `git branch --move` command:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:92
#: book/03-git-branching/sections/branch-management.asc:107
#: book/03-git-branching/sections/branch-management.asc:180
#, no-wrap
msgid ""
"[source, console]\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:94
#, no-wrap
msgid ""
"$ git branch --move bad-branch-name corrected-branch-name\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:98
#, no-wrap
msgid ""
"This replaces your `bad-branch-name` with `corrected-branch-name`, but this "
"change is only local for now.\n"
"To let others see the corrected branch on the remote, push it:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:102
#, no-wrap
msgid ""
"$ git push --set-upstream origin corrected-branch-name\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:105
#, no-wrap
msgid "Now we'll take a brief look at where we are now:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:114
#, no-wrap
msgid ""
"$ git branch --all\n"
"* corrected-branch-name\n"
"  main\n"
"  remotes/origin/bad-branch-name\n"
"  remotes/origin/corrected-branch-name\n"
"  remotes/origin/main\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:118
#, no-wrap
msgid ""
"Notice that you're on the branch `corrected-branch-name` and it's available "
"on the remote.\n"
"However, the branch with the bad name is also still present there but you "
"can delete it by executing the following command:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:122
#, no-wrap
msgid ""
"$ git push origin --delete bad-branch-name\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:125
#, no-wrap
msgid "Now the bad branch name is fully replaced with the corrected branch name.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:127
#, no-wrap
msgid "===== Changing the master branch name\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:129
#, no-wrap
msgid ""
"[WARNING]\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:133
#, no-wrap
msgid ""
"Changing the name of a branch like master/main/mainline/default will break "
"the integrations, services, helper utilities and build/release scripts that "
"your repository uses.\n"
"Before you do this, make sure you consult with your collaborators.\n"
"Also, make sure you do a thorough search through your repo and update any "
"references to the old branch name in your code and scripts.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:136
#, no-wrap
msgid "Rename your local `master` branch into `main` with the following command:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:140
#, no-wrap
msgid ""
"$ git branch --move master main\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:143
#, no-wrap
msgid ""
"There's no local `master` branch anymore, because it's renamed to the `main` "
"branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:146
#, no-wrap
msgid ""
"To let others see the new `main` branch, you need to push it to the "
"remote.\n"
"This makes the renamed branch available on the remote.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:150
#, no-wrap
msgid ""
"$ git push --set-upstream origin main\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:153
#, no-wrap
msgid "Now we end up with the following state:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:161
#, no-wrap
msgid ""
"git branch --all\n"
"* main\n"
"  remotes/origin/HEAD -> origin/master\n"
"  remotes/origin/main\n"
"  remotes/origin/master\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:167
#, no-wrap
msgid ""
"Your local `master` branch is gone, as it's replaced with the `main` "
"branch.\n"
"The `main` branch is present on the remote.\n"
"However, the old `master` branch is still present on the remote.\n"
"Other collaborators will continue to use the `master` branch as the base of "
"their work, until you make some further changes.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:169
#, no-wrap
msgid "Now you have a few more tasks in front of you to complete the transition:\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid ""
"Any projects that depend on this one will need to update their code and/or "
"configuration.\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid "Update any test-runner configuration files.\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid "Adjust build and release scripts.\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid ""
"Redirect settings on your repo host for things like the repo's default "
"branch, merge rules, and other things that match branch names.\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid "Update references to the old branch in documentation.\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/branch-management.asc:176
#, markdown-text, no-wrap
msgid "Close or merge any pull requests that target the old branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:178
#, no-wrap
msgid ""
"After you've done all these tasks, and are certain the `main` branch "
"performs just as the `master` branch, you can delete the `master` branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/branch-management.asc:182
#, no-wrap
msgid ""
"$ git push origin --delete master\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:3
#, no-wrap
msgid ""
"[[_git_branches_overview]]\n"
"=== Branches in a Nutshell\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:5
#, no-wrap
msgid ""
"To really understand the way Git does branching, we need to take a step back "
"and examine how Git stores its data.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:7
#, no-wrap
msgid ""
"As you may remember from <<ch01-getting-started#what_is_git_section>>, Git "
"doesn't store data as a series of changesets or differences, but instead as "
"a series of _snapshots_.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:10
#, no-wrap
msgid ""
"When you make a commit, Git stores a commit object that contains a pointer "
"to the snapshot of the content you staged.\n"
"This object also contains the author's name and email address, the message "
"that you typed, and pointers to the commit or commits that directly came "
"before this commit (its parent or parents): zero parents for the initial "
"commit, one parent for a normal commit, and multiple parents for a commit "
"that results from a merge of two or more branches.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:13
#, no-wrap
msgid ""
"To visualize this, let's assume that you have a directory containing three "
"files, and you stage them all and commit.\n"
"Staging the files computes a checksum for each one (the SHA-1 hash we "
"mentioned in <<ch01-getting-started#what_is_git_section>>), stores that "
"version of the file in the Git repository (Git refers to them as _blobs_), "
"and adds that checksum to the staging area:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:18
#, no-wrap
msgid ""
"$ git add README test.rb LICENSE\n"
"$ git commit -m 'Initial commit'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:22
#, no-wrap
msgid ""
"When you create the commit by running `git commit`, Git checksums each "
"subdirectory (in this case, just the root project directory) and stores them "
"as a tree object in the Git repository.\n"
"Git then creates a commit object that has the metadata and a pointer to the "
"root project tree so it can re-create that snapshot when needed.(((git "
"commands, commit)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:24
#, no-wrap
msgid ""
"Your Git repository now contains five objects: three _blobs_ (each "
"representing the contents of one of the three files), one _tree_ that lists "
"the contents of the directory and specifies which file names are stored as "
"which blobs, and one _commit_ with the pointer to that root tree and all the "
"commit metadata.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:27
#, no-wrap
msgid ""
".A commit and its tree\n"
"image::images/commit-and-tree.png[A commit and its tree]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:29
#, no-wrap
msgid ""
"If you make some changes and commit again, the next commit stores a pointer "
"to the commit that came immediately before it.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:32
#, no-wrap
msgid ""
".Commits and their parents\n"
"image::images/commits-and-parents.png[Commits and their parents]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:37
#, no-wrap
msgid ""
"A branch in Git is simply a lightweight movable pointer to one of these "
"commits.\n"
"The default branch name in Git is `master`.\n"
"As you start making commits, you're given a `master` branch that points to "
"the last commit you made.\n"
"Every time you commit, the `master` branch pointer moves forward "
"automatically.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:43
#, no-wrap
msgid ""
"The \"`master`\" branch in Git is not a special branch.(((master)))\n"
"It is exactly like any other branch.\n"
"The only reason nearly every repository has one is that the `git init` "
"command creates it by default and most people don't bother to change it.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:47
#, no-wrap
msgid ""
".A branch and its commit history\n"
"image::images/branch-and-history.png[A branch and its commit history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:50
#, no-wrap
msgid ""
"[[_create_new_branch]]\n"
"==== Creating a New Branch\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:56
#, no-wrap
msgid ""
"(((branches, creating)))\n"
"What happens when you create a new branch?\n"
"Well, doing so creates a new pointer for you to move around.\n"
"Let's say you want to create a new branch called `testing`.\n"
"You do this with the `git branch` command:(((git commands, branch)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:60
#, no-wrap
msgid ""
"$ git branch testing\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:63
#, no-wrap
msgid "This creates a new pointer to the same commit you're currently on.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:66
#, no-wrap
msgid ""
".Two branches pointing into the same series of commits\n"
"image::images/two-branches.png[Two branches pointing into the same series of "
"commits]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:73
#, no-wrap
msgid ""
"How does Git know what branch you're currently on?\n"
"It keeps a special pointer called `HEAD`.\n"
"Note that this is a lot different than the concept of `HEAD` in other VCSs "
"you may be used to, such as Subversion or CVS.\n"
"In Git, this is a pointer to the local branch you're currently on.\n"
"In this case, you're still on `master`.\n"
"The `git branch` command only _created_ a new branch -- it didn't switch to "
"that branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:76
#, no-wrap
msgid ""
".HEAD pointing to a branch\n"
"image::images/head-to-master.png[HEAD pointing to a branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:79
#, no-wrap
msgid ""
"You can easily see this by running a simple `git log` command that shows you "
"where the branch pointers are pointing.\n"
"This option is called `--decorate`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:86
#, no-wrap
msgid ""
"$ git log --oneline --decorate\n"
"f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats "
"to the central interface\n"
"34ac2 Fix bug #1328 - stack overflow under certain conditions\n"
"98ca9 Initial commit\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:89
#, no-wrap
msgid ""
"You can see the `master` and `testing` branches that are right there next to "
"the `f30ab` commit.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:92
#, no-wrap
msgid ""
"[[_switching_branches]]\n"
"==== Switching Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:96
#, no-wrap
msgid ""
"(((branches, switching)))\n"
"To switch to an existing branch, you run the `git checkout` command.(((git "
"commands, checkout)))\n"
"Let's switch to the new `testing` branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:100
#, no-wrap
msgid ""
"$ git checkout testing\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:103
#, no-wrap
msgid "This moves `HEAD` to point to the `testing` branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:106
#, no-wrap
msgid ""
".HEAD points to the current branch\n"
"image::images/head-to-testing.png[HEAD points to the current branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:109
#, no-wrap
msgid ""
"What is the significance of that?\n"
"Well, let's do another commit:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:114
#, no-wrap
msgid ""
"$ vim test.rb\n"
"$ git commit -a -m 'made a change'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:118
#, no-wrap
msgid ""
".The HEAD branch moves forward when a commit is made\n"
"image::images/advance-testing.png[The HEAD branch moves forward when a "
"commit is made]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:121
#, no-wrap
msgid ""
"This is interesting, because now your `testing` branch has moved forward, "
"but your `master` branch still points to the commit you were on when you ran "
"`git checkout` to switch branches.\n"
"Let's switch back to the `master` branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:125
#, no-wrap
msgid ""
"$ git checkout master\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:129
#, no-wrap
msgid ""
"[NOTE]\n"
".`git log` doesn't show _all_ the branches _all_ the time\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:131
#, no-wrap
msgid ""
"If you were to run `git log` right now, you might wonder where the "
"\"testing\" branch you just created went, as it would not appear in the "
"output.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:134
#, no-wrap
msgid ""
"The branch hasn't disappeared; Git just doesn't know that you're interested "
"in that branch and it is trying to show you what it thinks you're interested "
"in.\n"
"In other words, by default, `git log` will only show commit history below "
"the branch you've checked out.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:137
#, no-wrap
msgid ""
"To show commit history for the desired branch you have to explicitly specify "
"it: `git log testing`.\n"
"To show all of the branches, add `--all` to your `git log` command.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:141
#, no-wrap
msgid ""
".HEAD moves when you checkout\n"
"image::images/checkout-master.png[HEAD moves when you checkout]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:146
#, no-wrap
msgid ""
"That command did two things.\n"
"It moved the HEAD pointer back to point to the `master` branch, and it "
"reverted the files in your working directory back to the snapshot that "
"`master` points to.\n"
"This also means the changes you make from this point forward will diverge "
"from an older version of the project.\n"
"It essentially rewinds the work you've done in your `testing` branch so you "
"can go in a different direction.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:149
#, no-wrap
msgid ""
"[NOTE]\n"
".Switching branches changes files in your working directory\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:153
#, no-wrap
msgid ""
"It's important to note that when you switch branches in Git, files in your "
"working directory will change.\n"
"If you switch to an older branch, your working directory will be reverted to "
"look like it did the last time you committed on that branch.\n"
"If Git cannot do it cleanly, it will not let you switch at all.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:156
#, no-wrap
msgid "Let's make a few changes and commit again:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:161
#, no-wrap
msgid ""
"$ vim test.rb\n"
"$ git commit -a -m 'made other changes'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:167
#, no-wrap
msgid ""
"Now your project history has diverged (see <<divergent_history>>).\n"
"You created and switched to a branch, did some work on it, and then switched "
"back to your main branch and did other work.\n"
"Both of those changes are isolated in separate branches: you can switch back "
"and forth between the branches and merge them together when you're ready.\n"
"And you did all that with simple `branch`, `checkout`, and `commit` "
"commands.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:171
#, no-wrap
msgid ""
"[[divergent_history]]\n"
".Divergent history\n"
"image::images/advance-master.png[Divergent history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:174
#, no-wrap
msgid ""
"You can also see this easily with the `git log` command.\n"
"If you run `git log --oneline --decorate --graph --all` it will print out "
"the history of your commits, showing where your branch pointers are and how "
"your history has diverged.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:184
#, no-wrap
msgid ""
"$ git log --oneline --decorate --graph --all\n"
"* c2b9e (HEAD, master) Made other changes\n"
"| * 87ab2 (testing) Made a change\n"
"|/\n"
"* f30ab Add feature #32 - ability to add new formats to the central "
"interface\n"
"* 34ac2 Fix bug #1328 - stack overflow under certain conditions\n"
"* 98ca9 initial commit of my project\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:188
#, no-wrap
msgid ""
"Because a branch in Git is actually a simple file that contains the 40 "
"character SHA-1 checksum of the commit it points to, branches are cheap to "
"create and destroy.\n"
"Creating a new branch is as quick and simple as writing 41 bytes to a file "
"(40 characters and a newline).\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:193
#, no-wrap
msgid ""
"This is in sharp contrast to the way most older VCS tools branch, which "
"involves copying all of the project's files into a second directory.\n"
"This can take several seconds or even minutes, depending on the size of the "
"project, whereas in Git the process is always instantaneous.\n"
"Also, because we're recording the parents when we commit, finding a proper "
"merge base for merging is automatically done for us and is generally very "
"easy to do.\n"
"These features help encourage developers to create and use branches often.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:195
#, no-wrap
msgid "Let's see why you should do so.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:198
#, no-wrap
msgid ""
"[NOTE]\n"
".Creating a new branch and switching to it at the same time\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:200
#, no-wrap
msgid ""
"It's typical to create a new branch and want to switch to that new branch at "
"the same time -- this can be done in one operation with `git checkout -b "
"<newbranchname>`.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:205
#, no-wrap
msgid ""
"From Git version 2.23 onwards you can use `git switch` instead of `git "
"checkout` to:\n"
msgstr ""

#. type: Bullet: '- '
#: book/03-git-branching/sections/nutshell.asc:209
#, markdown-text, no-wrap
msgid "Switch to an existing branch: `git switch testing-branch`.\n"
msgstr ""

#. type: Bullet: '- '
#: book/03-git-branching/sections/nutshell.asc:209
#, markdown-text, no-wrap
msgid ""
"Create a new branch and switch to it: `git switch -c new-branch`. The `-c` "
"flag stands for create, you can also use the full flag: `--create`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/nutshell.asc:209
#, no-wrap
msgid ""
"- Return to your previously checked out branch: `git switch -`.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:3
#, no-wrap
msgid ""
"[[_rebasing]]\n"
"=== Rebasing\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:7
#, no-wrap
msgid ""
"(((rebasing)))\n"
"In Git, there are two main ways to integrate changes from one branch into "
"another: the `merge` and the `rebase`.\n"
"In this section you'll learn what rebasing is, how to do it, why it's a "
"pretty amazing tool, and in what cases you won't want to use it.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:9
#, no-wrap
msgid "==== The Basic Rebase\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:11
#, no-wrap
msgid ""
"If you go back to an earlier example from <<_basic_merging>>, you can see "
"that you diverged your work and made commits on two different branches.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:14
#, no-wrap
msgid ""
".Simple divergent history\n"
"image::images/basic-rebase-1.png[Simple divergent history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:17
#, no-wrap
msgid ""
"The easiest way to integrate the branches, as we've already covered, is the "
"`merge` command.\n"
"It performs a three-way merge between the two latest branch snapshots (`C3` "
"and `C4`) and the most recent common ancestor of the two (`C2`), creating a "
"new snapshot (and commit).\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:21
#, no-wrap
msgid ""
"[[rebasing-merging-example]]\n"
".Merging to integrate diverged work history\n"
"image::images/basic-rebase-2.png[Merging to integrate diverged work "
"history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:25
#, no-wrap
msgid ""
"However, there is another way: you can take the patch of the change that was "
"introduced in `C4` and reapply it on top of `C3`.\n"
"In Git, this is called _rebasing_.\n"
"With the `rebase` command, you can take all the changes that were committed "
"on one branch and replay them on a different branch.(((git commands, "
"rebase)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:27
#, no-wrap
msgid ""
"For this example, you would check out the `experiment` branch, and then "
"rebase it onto the `master` branch as follows:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:34
#, no-wrap
msgid ""
"$ git checkout experiment\n"
"$ git rebase master\n"
"First, rewinding head to replay your work on top of it...\n"
"Applying: added staged command\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:37
#, no-wrap
msgid ""
"This operation works by going to the common ancestor of the two branches "
"(the one you're on and the one you're rebasing onto), getting the diff "
"introduced by each commit of the branch you're on, saving those diffs to "
"temporary files, resetting the current branch to the same commit as the "
"branch you are rebasing onto, and finally applying each change in turn.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:40
#, no-wrap
msgid ""
".Rebasing the change introduced in `C4` onto `C3`\n"
"image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto "
"`C3`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:42
#, no-wrap
msgid ""
"At this point, you can go back to the `master` branch and do a fast-forward "
"merge.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:47
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge experiment\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:51
#, no-wrap
msgid ""
".Fast-forwarding the `master` branch\n"
"image::images/basic-rebase-4.png[Fast-forwarding the `master` branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:55
#, no-wrap
msgid ""
"Now, the snapshot pointed to by `C4'` is exactly the same as the one that "
"was pointed to by `C5` in <<rebasing-merging-example,the merge example>>.\n"
"There is no difference in the end product of the integration, but rebasing "
"makes for a cleaner history.\n"
"If you examine the log of a rebased branch, it looks like a linear history: "
"it appears that all the work happened in series, even when it originally "
"happened in parallel.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:59
#, no-wrap
msgid ""
"Often, you'll do this to make sure your commits apply cleanly on a remote "
"branch -- perhaps in a project to which you're trying to contribute but that "
"you don't maintain.\n"
"In this case, you'd do your work in a branch and then rebase your work onto "
"`origin/master` when you were ready to submit your patches to the main "
"project.\n"
"That way, the maintainer doesn't have to do any integration work -- just a "
"fast-forward or a clean apply.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:62
#, no-wrap
msgid ""
"Note that the snapshot pointed to by the final commit you end up with, "
"whether it's the last of the rebased commits for a rebase or the final merge "
"commit after a merge, is the same snapshot -- it's only the history that is "
"different.\n"
"Rebasing replays changes from one line of work onto another in the order "
"they were introduced, whereas merging takes the endpoints and merges them "
"together.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:64
#, no-wrap
msgid "==== More Interesting Rebases\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:70
#, no-wrap
msgid ""
"You can also have your rebase replay on something other than the rebase "
"target branch.\n"
"Take a history like <<rbdiag_e>>, for example.\n"
"You branched a topic branch (`server`) to add some server-side functionality "
"to your project, and made a commit.\n"
"Then, you branched off that to make the client-side changes (`client`) and "
"committed a few times.\n"
"Finally, you went back to your server branch and did a few more commits.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:74
#, no-wrap
msgid ""
"[[rbdiag_e]]\n"
".A history with a topic branch off another topic branch\n"
"image::images/interesting-rebase-1.png[A history with a topic branch off "
"another topic branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:77
#, no-wrap
msgid ""
"Suppose you decide that you want to merge your client-side changes into your "
"mainline for a release, but you want to hold off on the server-side changes "
"until it's tested further.\n"
"You can take the changes on `client` that aren't on `server` (`C8` and `C9`) "
"and replay them on your `master` branch by using the `--onto` option of `git "
"rebase`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:81
#, no-wrap
msgid ""
"$ git rebase --onto master server client\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:85
#, no-wrap
msgid ""
"This basically says, \"`Take the `client` branch, figure out the patches "
"since it diverged from the `server` branch, and replay these patches in the "
"`client` branch as if it was based directly off the `master` branch "
"instead.`\"\n"
"It's a bit complex, but the result is pretty cool.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:88
#, no-wrap
msgid ""
".Rebasing a topic branch off another topic branch\n"
"image::images/interesting-rebase-2.png[Rebasing a topic branch off another "
"topic branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:90
#, no-wrap
msgid "Now you can fast-forward your `master` branch (see <<rbdiag_g>>):\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:95
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge client\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:100
#, no-wrap
msgid ""
"[[rbdiag_g]]\n"
".Fast-forwarding your `master` branch to include the client branch changes\n"
"image::images/interesting-rebase-3.png[Fast-forwarding your `master` branch "
"to include the client branch changes]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:103
#, no-wrap
msgid ""
"Let's say you decide to pull in your server branch as well.\n"
"You can rebase the `server` branch onto the `master` branch without having "
"to check it out first by running `git rebase <basebranch> <topicbranch>` -- "
"which checks out the topic branch (in this case, `server`) for you and "
"replays it onto the base branch (`master`):\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:107
#, no-wrap
msgid ""
"$ git rebase master server\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:110
#, no-wrap
msgid ""
"This replays your `server` work on top of your `master` work, as shown in "
"<<rbdiag_h>>.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:114
#, no-wrap
msgid ""
"[[rbdiag_h]]\n"
".Rebasing your server branch on top of your `master` branch\n"
"image::images/interesting-rebase-4.png[Rebasing your server branch on top of "
"your `master` branch]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:116
#, no-wrap
msgid "Then, you can fast-forward the base branch (`master`):\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:121
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge server\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:124
#, no-wrap
msgid ""
"You can remove the `client` and `server` branches because all the work is "
"integrated and you don't need them anymore, leaving your history for this "
"entire process looking like <<rbdiag_i>>:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:129
#, no-wrap
msgid ""
"$ git branch -d client\n"
"$ git branch -d server\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:134
#, no-wrap
msgid ""
"[[rbdiag_i]]\n"
".Final commit history\n"
"image::images/interesting-rebase-5.png[Final commit history]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:137
#, no-wrap
msgid ""
"[[_rebase_peril]]\n"
"==== The Perils of Rebasing\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:140
#, no-wrap
msgid ""
"(((rebasing, perils of)))\n"
"Ahh, but the bliss of rebasing isn't without its drawbacks, which can be "
"summed up in a single line:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:142
#, no-wrap
msgid ""
"*Do not rebase commits that exist outside your repository and that people "
"may have based work on.*\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:145
#, no-wrap
msgid ""
"If you follow that guideline, you'll be fine.\n"
"If you don't, people will hate you, and you'll be scorned by friends and "
"family.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:148
#, no-wrap
msgid ""
"When you rebase stuff, you're abandoning existing commits and creating new "
"ones that are similar but different.\n"
"If you push commits somewhere and others pull them down and base work on "
"them, and then you rewrite those commits with `git rebase` and push them up "
"again, your collaborators will have to re-merge their work and things will "
"get messy when you try to pull their work back into yours.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:152
#, no-wrap
msgid ""
"Let's look at an example of how rebasing work that you've made public can "
"cause problems.\n"
"Suppose you clone from a central server and then do some work off that.\n"
"Your commit history looks like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:155
#, no-wrap
msgid ""
".Clone a repository, and base some work on it\n"
"image::images/perils-of-rebasing-1.png[\"Clone a repository, and base some "
"work on it.\"]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:158
#, no-wrap
msgid ""
"Now, someone else does more work that includes a merge, and pushes that work "
"to the central server.\n"
"You fetch it and merge the new remote branch into your work, making your "
"history look something like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:161
#, no-wrap
msgid ""
".Fetch more commits, and merge them into your work\n"
"image::images/perils-of-rebasing-2.png[\"Fetch more commits, and merge them "
"into your work.\"]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:164
#, no-wrap
msgid ""
"Next, the person who pushed the merged work decides to go back and rebase "
"their work instead; they do a `git push --force` to overwrite the history on "
"the server.\n"
"You then fetch from that server, bringing down the new commits.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:168
#, no-wrap
msgid ""
"[[_pre_merge_rebase_work]]\n"
".Someone pushes rebased commits, abandoning commits you've based your work "
"on\n"
"image::images/perils-of-rebasing-3.png[\"Someone pushes rebased commits, "
"abandoning commits you've based your work on.\"]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:171
#, no-wrap
msgid ""
"Now you're both in a pickle.\n"
"If you do a `git pull`, you'll create a merge commit which includes both "
"lines of history, and your repository will look like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:175
#, no-wrap
msgid ""
"[[_merge_rebase_work]]\n"
".You merge in the same work again into a new merge commit\n"
"image::images/perils-of-rebasing-4.png[You merge in the same work again into "
"a new merge commit]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:179
#, no-wrap
msgid ""
"If you run a `git log` when your history looks like this, you'll see two "
"commits that have the same author, date, and message, which will be "
"confusing.\n"
"Furthermore, if you push this history back up to the server, you'll "
"reintroduce all those rebased commits to the central server, which can "
"further confuse people.\n"
"It's pretty safe to assume that the other developer doesn't want `C4` and "
"`C6` to be in the history; that's why they rebased in the first place.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:182
#, no-wrap
msgid ""
"[[_rebase_rebase]]\n"
"==== Rebase When You Rebase\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:185
#, no-wrap
msgid ""
"If you *do* find yourself in a situation like this, Git has some further "
"magic that might help you out.\n"
"If someone on your team force pushes changes that overwrite work that you've "
"based work on, your challenge is to figure out what is yours and what "
"they've rewritten.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:188
#, no-wrap
msgid ""
"It turns out that in addition to the commit SHA-1 checksum, Git also "
"calculates a checksum that is based just on the patch introduced with the "
"commit.\n"
"This is called a \"`patch-id`\".\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:190
#, no-wrap
msgid ""
"If you pull down work that was rewritten and rebase it on top of the new "
"commits from your partner, Git can often successfully figure out what is "
"uniquely yours and apply them back on top of the new branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:192
#, no-wrap
msgid ""
"For instance, in the previous scenario, if instead of doing a merge when "
"we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git "
"will:\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/rebasing.asc:197
#, markdown-text, no-wrap
msgid "Determine what work is unique to our branch (C2, C3, C4, C6, C7)\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/rebasing.asc:197
#, markdown-text, no-wrap
msgid "Determine which are not merge commits (C2, C3, C4)\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/rebasing.asc:197
#, markdown-text, no-wrap
msgid ""
"Determine which have not been rewritten into the target branch (just C2 and "
"C3, since C4 is the same patch as C4')\n"
msgstr ""

#. type: Bullet: '* '
#: book/03-git-branching/sections/rebasing.asc:197
#, markdown-text, no-wrap
msgid "Apply those commits to the top of `teamone/master`\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:199
#, no-wrap
msgid ""
"So instead of the result we see in <<_merge_rebase_work>>, we would end up "
"with something more like <<_rebase_rebase_work>>.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:203
#, no-wrap
msgid ""
"[[_rebase_rebase_work]]\n"
".Rebase on top of force-pushed rebase work\n"
"image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase "
"work]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:206
#, no-wrap
msgid ""
"This only works if `C4` and `C4'` that your partner made are almost exactly "
"the same patch.\n"
"Otherwise the rebase won't be able to tell that it's a duplicate and will "
"add another C4-like patch (which will probably fail to apply cleanly, since "
"the changes would already be at least somewhat there).\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:209
#, no-wrap
msgid ""
"You can also simplify this by running a `git pull --rebase` instead of a "
"normal `git pull`.\n"
"Or you could do it manually with a `git fetch` followed by a `git rebase "
"teamone/master` in this case.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:211
#, no-wrap
msgid ""
"If you are using `git pull` and want to make `--rebase` the default, you can "
"set the `pull.rebase` config value with something like `git config --global "
"pull.rebase true`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:215
#, no-wrap
msgid ""
"If you only ever rebase commits that have never left your own computer, "
"you'll be just fine.\n"
"If you rebase commits that have been pushed, but that no one else has based "
"commits from, you'll also be fine.\n"
"If you rebase commits that have already been pushed publicly, and people may "
"have based work on those commits, then you may be in for some frustrating "
"trouble, and the scorn of your teammates.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:217
#, no-wrap
msgid ""
"If you or a partner does find it necessary at some point, make sure everyone "
"knows to run `git pull --rebase` to try to make the pain after it happens a "
"little bit simpler.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:219
#, no-wrap
msgid "==== Rebase vs. Merge\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:223
#, no-wrap
msgid ""
"(((rebasing, vs. merging)))(((merging, vs. rebasing)))\n"
"Now that you've seen rebasing and merging in action, you may be wondering "
"which one is better.\n"
"Before we can answer this, let's step back a bit and talk about what history "
"means.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:229
#, no-wrap
msgid ""
"One point of view on this is that your repository's commit history is a "
"*record of what actually happened.*\n"
"It's a historical document, valuable in its own right, and shouldn't be "
"tampered with.\n"
"From this angle, changing the commit history is almost blasphemous; you're "
"_lying_ about what actually transpired.\n"
"So what if there was a messy series of merge commits?\n"
"That's how it happened, and the repository should preserve that for "
"posterity.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:235
#, no-wrap
msgid ""
"The opposing point of view is that the commit history is the *story of how "
"your project was made.*\n"
"You wouldn't publish the first draft of a book, so why show your messy "
"work?\n"
"When you're working on a project, you may need a record of all your missteps "
"and dead-end paths, but when it's time to show your work to the world, you "
"may want to tell a more coherent story of how to get from A to B.\n"
"People in this camp use tools like rebase and filter-branch to rewrite their "
"commits before they're merged into the mainline branch.\n"
"They use tools like `rebase` and `filter-branch`, to tell the story in the "
"way that's best for future readers.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:239
#, no-wrap
msgid ""
"Now, to the question of whether merging or rebasing is better: hopefully "
"you'll see that it's not that simple.\n"
"Git is a powerful tool, and allows you to do many things to and with your "
"history, but every team and every project is different.\n"
"Now that you know how both of these things work, it's up to you to decide "
"which one is best for your particular situation.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/rebasing.asc:240
#, no-wrap
msgid ""
"You can get the best of both worlds: rebase local changes before pushing to "
"clean up your work, but never rebase anything that you've pushed "
"somewhere.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:3
#, no-wrap
msgid ""
"[[_remote_branches]]\n"
"=== Remote Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:8
#, no-wrap
msgid ""
"(((branches, remote)))(((references, remote)))\n"
"Remote references are references (pointers) in your remote repositories, "
"including branches, tags, and so on.\n"
"You can get a full list of remote references explicitly with `git ls-remote "
"<remote>`, or `git remote show <remote>` for remote branches as well as more "
"information.\n"
"Nevertheless, a more common way is to take advantage of remote-tracking "
"branches.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:12
#, no-wrap
msgid ""
"Remote-tracking branches are references to the state of remote branches.\n"
"They're local references that you can't move; Git moves them for you "
"whenever you do any network communication, to make sure they accurately "
"represent the state of the remote repository.\n"
"Think of them as bookmarks, to remind you where the branches in your remote "
"repositories were the last time you connected to them.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:16
#, no-wrap
msgid ""
"Remote-tracking branch names take the form `<remote>/<branch>`.\n"
"For instance, if you wanted to see what the `master` branch on your `origin` "
"remote looked like as of the last time you communicated with it, you would "
"check the `origin/master` branch.\n"
"If you were working on an issue with a partner and they pushed up an `iss53` "
"branch, you might have your own local `iss53` branch, but the branch on the "
"server would be represented by the remote-tracking branch `origin/iss53`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:21
#, no-wrap
msgid ""
"This may be a bit confusing, so let's look at an example.\n"
"Let's say you have a Git server on your network at `git.ourcompany.com`.\n"
"If you clone from this, Git's `clone` command automatically names it "
"`origin` for you, pulls down all its data, creates a pointer to where its "
"`master` branch is, and names it `origin/master` locally.\n"
"Git also gives you your own local `master` branch starting at the same place "
"as origin's `master` branch, so you have something to work from.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:24
#, no-wrap
msgid ""
"[NOTE]\n"
".\"`origin`\" is not special\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:28
#, no-wrap
msgid ""
"Just like the branch name \"`master`\" does not have any special meaning in "
"Git, neither does \"`origin`\".\n"
"While \"`master`\" is the default name for a starting branch when you run "
"`git init` which is the only reason it's widely used, \"`origin`\" is the "
"default name for a remote when you run `git clone`.\n"
"If you run `git clone -o booyah` instead, then you will have `booyah/master` "
"as your default remote branch.(((origin)))\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:32
#, no-wrap
msgid ""
".Server and local repositories after cloning\n"
"image::images/remote-branches-1.png[Server and local repositories after "
"cloning.]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:35
#, no-wrap
msgid ""
"If you do some work on your local `master` branch, and, in the meantime, "
"someone else pushes to `git.ourcompany.com` and updates its `master` branch, "
"then your histories move forward differently.\n"
"Also, as long as you stay out of contact with your `origin` server, your "
"`origin/master` pointer doesn't move.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:38
#, no-wrap
msgid ""
".Local and remote work can diverge\n"
"image::images/remote-branches-2.png[Local and remote work can diverge]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:41
#, no-wrap
msgid ""
"To synchronize your work with a given remote, you run a `git fetch <remote>` "
"command (in our case, `git fetch origin`).\n"
"This command looks up which server \"`origin`\" is (in this case, it's "
"`git.ourcompany.com`), fetches any data from it that you don't yet have, and "
"updates your local database, moving your `origin/master` pointer to its new, "
"more up-to-date position.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:44
#, no-wrap
msgid ""
".`git fetch` updates your remote-tracking branches\n"
"image::images/remote-branches-3.png[`git fetch` updates your remote "
"references]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:49
#, no-wrap
msgid ""
"To demonstrate having multiple remote servers and what remote branches for "
"those remote projects look like, let's assume you have another internal Git "
"server that is used only for development by one of your sprint teams.\n"
"This server is at `git.team1.ourcompany.com`.\n"
"You can add it as a new remote reference to the project you're currently "
"working on by running the `git remote add` command as we covered in "
"<<ch02-git-basics-chapter#ch02-git-basics-chapter>>.\n"
"Name this remote `teamone`, which will be your shortname for that whole "
"URL.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:52
#, no-wrap
msgid ""
".Adding another server as a remote\n"
"image::images/remote-branches-4.png[Adding another server as a remote]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:55
#, no-wrap
msgid ""
"Now, you can run `git fetch teamone` to fetch everything the remote "
"`teamone` server has that you don't have yet.\n"
"Because that server has a subset of the data your `origin` server has right "
"now, Git fetches no data but sets a remote-tracking branch called "
"`teamone/master` to point to the commit that `teamone` has as its `master` "
"branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:58
#, no-wrap
msgid ""
".Remote-tracking branch for `teamone/master`\n"
"image::images/remote-branches-5.png[Remote tracking branch for "
"`teamone/master`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:61
#, no-wrap
msgid ""
"[[_pushing_branches]]\n"
"==== Pushing\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:66
#, no-wrap
msgid ""
"(((pushing)))\n"
"When you want to share a branch with the world, you need to push it up to a "
"remote to which you have write access.\n"
"Your local branches aren't automatically synchronized to the remotes you "
"write to -- you have to explicitly push the branches you want to share.\n"
"That way, you can use private branches for work you don't want to share, and "
"push up only the topic branches you want to collaborate on.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:69
#, no-wrap
msgid ""
"If you have a branch named `serverfix` that you want to work on with others, "
"you can push it up the same way you pushed your first branch.\n"
"Run `git push <remote> <branch>`:(((git commands, push)))\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:80
#, no-wrap
msgid ""
"$ git push origin serverfix\n"
"Counting objects: 24, done.\n"
"Delta compression using up to 8 threads.\n"
"Compressing objects: 100% (15/15), done.\n"
"Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\n"
"Total 24 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/schacon/simplegit\n"
" * [new branch]      serverfix -> serverfix\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:88
#, no-wrap
msgid ""
"This is a bit of a shortcut.\n"
"Git automatically expands the `serverfix` branchname out to "
"`refs/heads/serverfix:refs/heads/serverfix`, which means, \"`Take my "
"`serverfix` local branch and push it to update the remote's `serverfix` "
"branch.`\"\n"
"We'll go over the `refs/heads/` part in detail in "
"<<ch10-git-internals#ch10-git-internals>>, but you can generally leave it "
"off.\n"
"You can also do `git push origin serverfix:serverfix`, which does the same "
"thing -- it says, \"`Take my serverfix and make it the remote's "
"serverfix.`\"\n"
"You can use this format to push a local branch into a remote branch that is "
"named differently.\n"
"If you didn't want it to be called `serverfix` on the remote, you could "
"instead run `git push origin serverfix:awesomebranch` to push your local "
"`serverfix` branch to the `awesomebranch` branch on the remote project.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:91
#, no-wrap
msgid ""
"[NOTE]\n"
".Don't type your password every time\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:94
#, no-wrap
msgid ""
"If you're using an HTTPS URL to push over, the Git server will ask you for "
"your username and password for authentication.\n"
"By default it will prompt you on the terminal for this information so the "
"server can tell if you're allowed to push.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:97
#, no-wrap
msgid ""
"If you don't want to type it every single time you push, you can set up a "
"\"`credential cache`\".\n"
"The simplest is just to keep it in memory for a few minutes, which you can "
"easily set up by running `git config --global credential.helper cache`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:99
#, no-wrap
msgid ""
"For more information on the various credential caching options available, "
"see <<ch07-git-tools#_credential_caching>>.\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:102
#, no-wrap
msgid ""
"The next time one of your collaborators fetches from the server, they will "
"get a reference to where the server's version of `serverfix` is under the "
"remote branch `origin/serverfix`:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:112
#, no-wrap
msgid ""
"$ git fetch origin\n"
"remote: Counting objects: 7, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/schacon/simplegit\n"
" * [new branch]      serverfix    -> origin/serverfix\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:116
#, no-wrap
msgid ""
"It's important to note that when you do a fetch that brings down new "
"remote-tracking branches, you don't automatically have local, editable "
"copies of them.\n"
"In other words, in this case, you don't have a new `serverfix` branch -- you "
"have only an `origin/serverfix` pointer that you can't modify.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:119
#, no-wrap
msgid ""
"To merge this work into your current working branch, you can run `git merge "
"origin/serverfix`.\n"
"If you want your own `serverfix` branch that you can work on, you can base "
"it off your remote-tracking branch:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:125
#, no-wrap
msgid ""
"$ git checkout -b serverfix origin/serverfix\n"
"Branch serverfix set up to track remote branch serverfix from origin.\n"
"Switched to a new branch 'serverfix'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:128
#, no-wrap
msgid ""
"This gives you a local branch that you can work on that starts where "
"`origin/serverfix` is.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:131
#, no-wrap
msgid ""
"[[_tracking_branches]]\n"
"==== Tracking Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:136
#, no-wrap
msgid ""
"(((branches, tracking)))(((branches, upstream)))\n"
"Checking out a local branch from a remote-tracking branch automatically "
"creates what is called a \"`tracking branch`\" (and the branch it tracks is "
"called an \"`upstream branch`\").\n"
"Tracking branches are local branches that have a direct relationship to a "
"remote branch.\n"
"If you're on a tracking branch and type `git pull`, Git automatically knows "
"which server to fetch from and which branch to merge in.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:141
#, no-wrap
msgid ""
"When you clone a repository, it generally automatically creates a `master` "
"branch that tracks `origin/master`.\n"
"However, you can set up other tracking branches if you wish -- ones that "
"track branches on other remotes, or don't track the `master` branch.\n"
"The simple case is the example you just saw, running `git checkout -b "
"<branch> <remote>/<branch>`.\n"
"This is a common enough operation that Git provides the `--track` "
"shorthand:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:147
#, no-wrap
msgid ""
"$ git checkout --track origin/serverfix\n"
"Branch serverfix set up to track remote branch serverfix from origin.\n"
"Switched to a new branch 'serverfix'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:151
#, no-wrap
msgid ""
"In fact, this is so common that there's even a shortcut for that shortcut.\n"
"If the branch name you're trying to checkout (a) doesn't exist and (b) "
"exactly matches a name on only one remote, Git will create a tracking branch "
"for you:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:157
#, no-wrap
msgid ""
"$ git checkout serverfix\n"
"Branch serverfix set up to track remote branch serverfix from origin.\n"
"Switched to a new branch 'serverfix'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:160
#, no-wrap
msgid ""
"To set up a local branch with a different name than the remote branch, you "
"can easily use the first version with a different local branch name:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:166
#, no-wrap
msgid ""
"$ git checkout -b sf origin/serverfix\n"
"Branch sf set up to track remote branch serverfix from origin.\n"
"Switched to a new branch 'sf'\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:169
#, no-wrap
msgid ""
"Now, your local branch `sf` will automatically pull from "
"`origin/serverfix`.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:171
#, no-wrap
msgid ""
"If you already have a local branch and want to set it to a remote branch you "
"just pulled down, or want to change the upstream branch you're tracking, you "
"can use the `-u` or `--set-upstream-to` option to `git branch` to explicitly "
"set it at any time.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:176
#, no-wrap
msgid ""
"$ git branch -u origin/serverfix\n"
"Branch serverfix set up to track remote branch serverfix from origin.\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:180
#, no-wrap
msgid ""
"[NOTE]\n"
".Upstream shorthand\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:183
#, no-wrap
msgid ""
"When you have a tracking branch set up, you can reference its upstream "
"branch with the `@{upstream}` or `@{u}` shorthand.\n"
"So if you're on the `master` branch and it's tracking `origin/master`, you "
"can say something like `git merge @{u}` instead of `git merge origin/master` "
"if you wish.(((@{u})))(((@{upstream})))\n"
"====\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:187
#, no-wrap
msgid ""
"If you want to see what tracking branches you have set up, you can use the "
"`-vv` option to `git branch`.\n"
"This will list out your local branches with more information including what "
"each branch is tracking and if your local branch is ahead, behind or both.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:195
#, no-wrap
msgid ""
"$ git branch -vv\n"
"  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets\n"
"  master    1ae2a45 [origin/master] Deploy index fix\n"
"* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should "
"do it\n"
"  testing   5ea463a Try something new\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:201
#, no-wrap
msgid ""
"So here we can see that our `iss53` branch is tracking `origin/iss53` and is "
"\"`ahead`\" by two, meaning that we have two commits locally that are not "
"pushed to the server.\n"
"We can also see that our `master` branch is tracking `origin/master` and is "
"up to date.\n"
"Next we can see that our `serverfix` branch is tracking the "
"`server-fix-good` branch on our `teamone` server and is ahead by three and "
"behind by one, meaning that there is one commit on the server we haven't "
"merged in yet and three commits locally that we haven't pushed.\n"
"Finally we can see that our `testing` branch is not tracking any remote "
"branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:206
#, no-wrap
msgid ""
"It's important to note that these numbers are only since the last time you "
"fetched from each server.\n"
"This command does not reach out to the servers, it's telling you about what "
"it has cached from these servers locally.\n"
"If you want totally up to date ahead and behind numbers, you'll need to "
"fetch from all your remotes right before running this.\n"
"You could do that like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:210
#, no-wrap
msgid ""
"$ git fetch --all; git branch -vv\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:213
#, no-wrap
msgid "==== Pulling\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:219
#, no-wrap
msgid ""
"(((pulling)))\n"
"While the `git fetch` command will fetch all the changes on the server that "
"you don't have yet, it will not modify your working directory at all.\n"
"It will simply get the data for you and let you merge it yourself.\n"
"However, there is a command called `git pull` which is essentially a `git "
"fetch` immediately followed by a `git merge` in most cases.\n"
"If you have a tracking branch set up as demonstrated in the last section, "
"either by explicitly setting it or by having it created for you by the "
"`clone` or `checkout` commands, `git pull` will look up what server and "
"branch your current branch is tracking, fetch from that server and then try "
"to merge in that remote branch.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:221
#, no-wrap
msgid ""
"Generally it's better to simply use the `fetch` and `merge` commands "
"explicitly as the magic of `git pull` can often be confusing.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:224
#, no-wrap
msgid ""
"[[_delete_branches]]\n"
"==== Deleting Remote Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:229
#, no-wrap
msgid ""
"(((branches, deleting remote)))\n"
"Suppose you're done with a remote branch -- say you and your collaborators "
"are finished with a feature and have merged it into your remote's `master` "
"branch (or whatever branch your stable codeline is in).\n"
"You can delete a remote branch using the `--delete` option to `git push`.\n"
"If you want to delete your `serverfix` branch from the server, you run the "
"following:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:235
#, no-wrap
msgid ""
"$ git push origin --delete serverfix\n"
"To https://github.com/schacon/simplegit\n"
" - [deleted]         serverfix\n"
"----\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/remote-branches.asc:238
#, no-wrap
msgid ""
"Basically all this does is remove the pointer from the server.\n"
"The Git server will generally keep the data there for a while until a "
"garbage collection runs, so if it was accidentally deleted, it's often easy "
"to recover.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:2
#, no-wrap
msgid "=== Branching Workflows\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:5
#, no-wrap
msgid ""
"Now that you have the basics of branching and merging down, what can or "
"should you do with them?\n"
"In this section, we'll cover some common workflows that this lightweight "
"branching makes possible, so you can decide if you would like to incorporate "
"them into your own development cycle.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:7
#, no-wrap
msgid "==== Long-Running Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:11
#, no-wrap
msgid ""
"(((branches, long-running)))\n"
"Because Git uses a simple three-way merge, merging from one branch into "
"another multiple times over a long period is generally easy to do.\n"
"This means you can have several branches that are always open and that you "
"use for different stages of your development cycle; you can merge regularly "
"from some of them into others.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:15
#, no-wrap
msgid ""
"Many Git developers have a workflow that embraces this approach, such as "
"having only code that is entirely stable in their `master` branch -- "
"possibly only code that has been or will be released.\n"
"They have another parallel branch named `develop` or `next` that they work "
"from or use to test stability -- it isn't necessarily always stable, but "
"whenever it gets to a stable state, it can be merged into `master`.\n"
"It's used to pull in topic branches (short-lived branches, like your earlier "
"`iss53` branch) when they're ready, to make sure they pass all the tests and "
"don't introduce bugs.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:18
#, no-wrap
msgid ""
"In reality, we're talking about pointers moving up the line of commits "
"you're making.\n"
"The stable branches are farther down the line in your commit history, and "
"the bleeding-edge branches are farther up the history.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:21
#, no-wrap
msgid ""
".A linear view of progressive-stability branching\n"
"image::images/lr-branches-1.png[A linear view of progressive-stability "
"branching]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:23
#, no-wrap
msgid ""
"It's generally easier to think about them as work silos, where sets of "
"commits graduate to a more stable silo when they're fully tested.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:27
#, no-wrap
msgid ""
"[[lrbranch_b]]\n"
".A \"`silo`\" view of progressive-stability branching\n"
"image::images/lr-branches-2.png[A âsiloâ view of progressive-stability "
"branching]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:32
#, no-wrap
msgid ""
"You can keep doing this for several levels of stability.\n"
"Some larger projects also have a `proposed` or `pu` (proposed updates) "
"branch that has integrated branches that may not be ready to go into the "
"`next` or `master` branch.\n"
"The idea is that your branches are at various levels of stability; when they "
"reach a more stable level, they're merged into the branch above them.\n"
"Again, having multiple long-running branches isn't necessary, but it's often "
"helpful, especially when you're dealing with very large or complex "
"projects.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:35
#, no-wrap
msgid ""
"[[_topic_branch]]\n"
"==== Topic Branches\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:41
#, no-wrap
msgid ""
"(((branches, topic)))\n"
"Topic branches, however, are useful in projects of any size.\n"
"A topic branch is a short-lived branch that you create and use for a single "
"particular feature or related work.\n"
"This is something you've likely never done with a VCS before because it's "
"generally too expensive to create and merge branches.\n"
"But in Git it's common to create, work on, merge, and delete branches "
"several times a day.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:46
#, no-wrap
msgid ""
"You saw this in the last section with the `iss53` and `hotfix` branches you "
"created.\n"
"You did a few commits on them and deleted them directly after merging them "
"into your main branch.\n"
"This technique allows you to context-switch quickly and completely -- "
"because your work is separated into silos where all the changes in that "
"branch have to do with that topic, it's easier to see what has happened "
"during code review and such.\n"
"You can keep the changes there for minutes, days, or months, and merge them "
"in when they're ready, regardless of the order in which they were created or "
"worked on.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:49
#, no-wrap
msgid ""
"Consider an example of doing some work (on `master`), branching off for an "
"issue (`iss91`), working on it for a bit, branching off the second branch to "
"try another way of handling the same thing (`iss91v2`), going back to your "
"`master` branch and working there for a while, and then branching off there "
"to do some work that you're not sure is a good idea (`dumbidea` branch).\n"
"Your commit history will look something like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:52
#, no-wrap
msgid ""
".Multiple topic branches\n"
"image::images/topic-branches-1.png[Multiple topic branches]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:56
#, no-wrap
msgid ""
"Now, let's say you decide you like the second solution to your issue best "
"(`iss91v2`); and you showed the `dumbidea` branch to your coworkers, and it "
"turns out to be genius.\n"
"You can throw away the original `iss91` branch (losing commits `C5` and "
"`C6`) and merge in the other two.\n"
"Your history then looks like this:\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:59
#, no-wrap
msgid ""
".History after merging `dumbidea` and `iss91v2`\n"
"image::images/topic-branches-2.png[History after merging `dumbidea` and "
"`iss91v2`]\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:61
#, no-wrap
msgid ""
"We will go into more detail about the various possible workflows for your "
"Git project in <<ch05-distributed-git#ch05-distributed-git>>, so before you "
"decide which branching scheme your next project will use, be sure to read "
"that chapter.\n"
msgstr ""

#. type: Plain text
#: book/03-git-branching/sections/workflows.asc:63
#, no-wrap
msgid ""
"It's important to remember when you're doing all this that these branches "
"are completely local.\n"
"When you're branching and merging, everything is being done only in your Git "
"repository -- there is no communication with the server.\n"
msgstr ""
